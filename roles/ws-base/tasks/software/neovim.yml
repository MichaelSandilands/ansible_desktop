---
# Neovim setup - distro-specific

# == Ubuntu / Pop!_OS / TUXEDO OS ==
- name: Add Neovim PPA on Ubuntu-family systems
  ansible.builtin.apt_repository:
    repo: ppa:neovim-ppa/unstable
  when: ansible_facts['distribution'] in ['Ubuntu', 'Pop!_OS', 'TUXEDO OS']

- name: Install Neovim and dependencies on Ubuntu-family systems
  ansible.builtin.apt:
    update_cache: yes
    name:
      - make
      - gcc
      - ripgrep
      - unzip
      - git
      - xclip
      - neovim
    state: present
  when: ansible_facts['distribution'] in ['Ubuntu', 'Pop!_OS', 'TUXEDO OS']

# == Debian (stable) ==
- name: Install dev tools and dependencies on Debian
  ansible.builtin.apt:
    update_cache: yes
    name:
      - make
      - gcc
      - ripgrep
      - unzip
      - git
      - xclip
      - curl
    state: present
  when: ansible_facts['distribution'] == "Debian"

- name: Download latest Neovim release on Debian
  ansible.builtin.get_url:
    url: https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
    dest: /tmp/nvim-linux-x86_64.tar.gz
    mode: '0644'
  when: ansible_facts['distribution'] == "Debian"

- name: Extract and install Neovim binary to /opt on Debian
  ansible.builtin.unarchive:
    src: /tmp/nvim-linux-x86_64.tar.gz
    dest: /opt
    remote_src: yes
    extra_opts: [--strip-components=1]
    creates: /opt/bin/nvim
  when: ansible_facts['distribution'] == "Debian"

- name: Symlink Neovim binary to /usr/local/bin
  ansible.builtin.file:
    src: /opt/bin/nvim
    dest: /usr/local/bin/nvim
    state: link
    force: true
  when: ansible_facts['distribution'] == "Debian"

# == Fedora ==
- name: Install Neovim and dependencies on Fedora
  ansible.builtin.dnf:
    name:
      - gcc
      - make
      - git
      - ripgrep
      - fd-find
      - unzip
      - neovim
    state: present
  when: ansible_facts['distribution'] == "Fedora"

# == Arch Linux ==
- name: Install Neovim and dependencies on Arch
  community.general.pacman:
    name:
      - gcc
      - make
      - git
      - ripgrep
      - fd
      - unzip
      - neovim
    state: present
    update_cache: true
  when: ansible_facts['os_family'] == "Archlinux"

# == Neovim Kickstart ==
- name: Ensure Neovim config directory exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'XDG_CONFIG_HOME') | default(ansible.HOME + '/.config', true) }}/nvim"
    state: directory
    mode: '0755'

- name: Clone kickstart.nvim into Neovim config
  ansible.builtin.git:
    repo: https://github.com/MichaelSandilands/kickstart.nvim.git
    dest: "{{ lookup('env', 'XDG_CONFIG_HOME') | default(ansible.HOME + '/.config', true) }}/nvim"
    version: HEAD
    update: yes
